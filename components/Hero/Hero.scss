@use 'stylesheets/config' as *;
@use 'stylesheets/mixins' as *;

/**
 * 1. Keep the following couple of elements on top of the potential scaled
 *    hero background
 */
.Hero {
  --Stamp-center-x: 0px;
  --Stamp-center-y: 0px;

  background-color: var(--Hero-bg);
  height: clamp(
    var(--Hero-min-height),
    var(--Hero-height),
    var(--Hero-max-height)
  );
  position: relative;

  // [1.]
  &:not(.-transition\:pre) {
    + *,
    + * + * {
      position: relative;
      z-index: 2;
    }
  }

  &.-transition\:pre {
    background-color: var(--tone-50);
    box-shadow: inset 0 var(--border-width-negative) 0 var(--border-950);

    @for $i from 0 through 5 {
      &:nth-child(#{$i}) {
        z-index: #{11 - $i};
      }
    }
  }

  &.is-transition {
    .Hero-content,
    .Hero-link {
      z-index: 0;
    }
  }
}

.Hero-inner {
  min-height: var(--Hero-inner-min-height);
  pointer-events: none;

  > * {
    inset: 0;
    position: absolute;
  }

  > .wrap:not(.Hero-link) {
    @include mq($until: l) {
      padding-right: 0;
    }
  }
}

.Hero-heading {
  overflow: hidden;
  z-index: 2;
}

.Hero-heading-inner {
  align-items: center;
  bottom: rem($space-xl);
  display: flex;
  height: 25%;
  margin-bottom: 0;
  pointer-events: all;
  position: absolute;
  transform: translate(0, -150%);
  white-space: nowrap;

  .Hero.-transition\:pre & {
    transform: translate(0, 0);
  }

  @include mq(l) {
    bottom: rem(-$space-ml);
  }
}

.Hero-figure {
  position: relative;
}

.Hero-link {
  inset: auto 0 rem($space-m + $space-2xs) 0;
  padding-right: var(--wrap-space-right);
  pointer-events: all;
  z-index: 4;
}

.Hero-content {
  align-self: center;
  pointer-events: all;
  position: relative;
  z-index: 4;
}

.Hero-figure-bg {
  background: hsl(var(--Hero-figure-bg-hsl) / var(--Hero-figure-bg-alpha-pre));
  height: 100%;
  width: 100%;
  z-index: 1;
}

.Hero-figure-bg--animate {
  background: linear-gradient(
    to bottom,
    hsl(var(--Hero-figure-bg-hsl) / var(--Hero-figure-bg-alpha)),
    hsl(var(--Hero-figure-bg-hsl) / 0)
  );
  position: relative;
  transform: scaleY(4);

  .Hero.-transition\:pre & {
    background: hsl(
      var(--Hero-figure-bg-hsl) / var(--Hero-figure-bg-alpha-pre)
    );
    transform: scaleY(1);
  }
}

.Hero-stamp {
  pointer-events: all;

  .Stamp-inner {
    inset: 0;
  }
}
